/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package SEC_Assignment;
import java.lang.reflect.InvocationTargetException;
import java.util.*;
import org.python.util.PythonInterpreter;
import org.python.core.*;
public class App //implements API
{

    private static ArrayList<Plugin> pluginList = new ArrayList<Plugin>();
    public static void main(String[] args)
    {
        int menuOption = 0;
        while(menuOption != 3)
        {
            menuOption = DisplayMenu();
            if(menuOption == 1)
            {
                int pluginOption = getPluginMenuOption();
                if (pluginOption == 1)
                {
                    System.out.println("Loaded Plugins");
                }
                else if(pluginOption == 2)
                {
                   AddPlugin(pluginOption);
                }
            }
            else if(menuOption == 2)
            {
                EvaluateExpression();
            } 
        }
    }
    
    public static void AddPlugin(int pluginOption)
    {
        while(pluginOption == 2)
        {
           try
           {
              String pluginName = getPluginName();
              Class<?> pluginClass = Class.forName(pluginName);
              Plugin pluginObj = (Plugin) pluginClass.getConstructor().newInstance();
              pluginOption = 0;
              pluginList.add(pluginObj);
           }
           catch(NoSuchMethodException e)
           {
               System.out.println("Plugin does not exist, please try again");
               e.printStackTrace();
           }
           catch(ClassNotFoundException f)
           {
               System.out.println("Class does not exist, please try again");
               f.printStackTrace();
           }
           catch(InstantiationException g)
           {
               System.out.println("Something went wrong, try again");
               g.printStackTrace();
           }
           catch(IllegalAccessException h)
           {
               System.out.println("Can't access class, try again");
               h.printStackTrace();
           }
           catch(InvocationTargetException j)
           {
               System.out.println("Can't call class constructor, try again");
               j.printStackTrace();
           }
        }
    }
    
    public static String getPluginName()
    {
        System.out.println("Please enter a plugin name");
        Scanner sc = new Scanner(System.in);
        String pluginName = sc.nextLine();
        while(pluginName.length() == 0)
        {
            System.out.println("Please enter a non-empty plugin name");
            pluginName = sc.nextLine();
        }
        return pluginName;
    }
    
    public static int getPluginMenuOption()
    {
        System.out.println("Please type a number to select an option");
        System.out.println("1. View Plugins");
        System.out.println("2. Add Plugins");
        Scanner sc = new Scanner(System.in);
        int option = sc.nextInt();
        while(option < 1 || option > 2)
        {
            System.out.println("Please enter an integer between 1 and 2");
            option = sc.nextInt();
        }
        return option;
    }
    
    public static void EvaluateExpression()
    {
        boolean progressLoaded = false;
        PythonInterpreter py = new PythonInterpreter();
        String expression = getExpression();
        double minValue = getMinimumValue();
        double maxValue = getMaximumValue(minValue);
        double incrementValue = getIncrementValue();
        CalculationAPI calcApi= new CalculationAPI(expression, minValue, 
                                                    maxValue, incrementValue);
        for(Plugin p : pluginList)
        {
            p.start(calcApi);
            if(p instanceof Progress)
            {
                progressLoaded = true;
            }
        }
        String tempExp;
        for(double x = minValue; x <= maxValue; x+=incrementValue)
        {
            tempExp = expression;
            tempExp = tempExp.replace("x", Double.toString(x));
            double result = ((PyFloat) py.eval("float(" + tempExp + ")")).getValue();
            calcApi.notifyResult(x, result);
            System.out.println("Result was: " + result);
            calcApi.setYValue(result);
        }
        if(progressLoaded)
        {
            System.out.println("100% Calculation Complete");
        }
    }

    private static int DisplayMenu()
    {
        System.out.println("Please type a number to select an option");
        System.out.println("1. Manage Plugins");
        System.out.println("2. Evaluate Equation");
        System.out.println("3. Exit");
        Scanner sc = new Scanner(System.in);
        int option = sc.nextInt();
        while(option < 1 || option > 3)
        {
            System.out.println("Please enter an integer between 1 and 3");
            option = sc.nextInt();
        }
        return option;
    }
    
    private static String getExpression()
    {
        Scanner sc = new Scanner(System.in);
        System.out.println("Please enter a mathematical expression");
        String expression = sc.nextLine();
        while(expression.trim().length() == 0 || expression == null || !expression.contains("x"))
        {
            System.out.println("Please enter a valid expression that contains the variable x");
            expression = sc.nextLine();
        }
        return expression;
    }
    
    private static double getMinimumValue()
    {
        Scanner sc = new Scanner(System.in);
        System.out.println("Please enter the minimum x value");
        return sc.nextDouble();   
    }
    
    private static double getMaximumValue(double minValue)
    {
        Scanner sc = new Scanner(System.in);
        System.out.println("Please enter the maximum x value");
        double maxValue = sc.nextDouble();  
        while(maxValue < minValue)
        {
            System.out.println("Please enter a value higher than " + minValue);
            maxValue = sc.nextDouble();
        }
        return maxValue;
    }
    
    private static double getIncrementValue()
    {
        Scanner sc = new Scanner(System.in);
        System.out.println("Please enter the increment x value");
        return sc.nextDouble();  
    }
    
            
}
